From: <Saved by Blink>
Snapshot-Content-Location: https://dwm.suckless.org/patches/autostart/dwm-autostart-20210120-cb3f58a.diff
Subject: 
Date: Mon, 13 Mar 2023 07:12:17 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--K8ww1cGZ6JYBpSUltqPWWfGnkLc6oh6VSy06oAjxb0----"


------MultipartBoundary--K8ww1cGZ6JYBpSUltqPWWfGnkLc6oh6VSy06oAjxb0----
Content-Type: text/html
Content-ID: <frame-A5E597CA40923BF2865CBCC55F74BF2D@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://dwm.suckless.org/patches/autostart/dwm-autostart-20210120-cb3f58a.diff

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3Dwindows-1252"><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css=
-044fea00-5219-462a-a0ff-c8f2b934f1fc@mhtml.blink" /></head><body><pre styl=
e=3D"word-wrap: break-word; white-space: pre-wrap;">From 37e970479dc5d40e57=
fc0cbfeaa5e39941483237 Mon Sep 17 00:00:00 2001
From: Gan Ainm &lt;gan.ainm.riomhphost@gmail.com&gt;
Date: Wed, 10 Jun 2020 10:59:02 +0000
Subject: [PATCH] dwm-xdgautostart-6.2.diff

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
---
 dwm.1 | 23 +++++++++++++++++
 dwm.c | 82 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 105 insertions(+)

diff --git a/dwm.1 b/dwm.1
index 13b3729..9533aa6 100644
--- a/dwm.1
+++ b/dwm.1
@@ -30,6 +30,14 @@ top left corner.  The tags which are applied to one or m=
ore windows are
 indicated with an empty square in the top left corner.
 .P
 dwm draws a small border around windows to indicate the focus state.
+.P
+On start, dwm can start additional programs that may be specified in two s=
pecial
+shell scripts (see the FILES section below), autostart_blocking.sh and
+autostart.sh.  The former is executed first and dwm will wait for its
+termination before starting.  The latter is executed in the background bef=
ore
+dwm enters its handler loop.
+.P
+Either of these files may be omitted.
 .SH OPTIONS
 .TP
 .B \-v
@@ -152,6 +160,21 @@ Toggles focused window between floating and tiled stat=
e.
 .TP
 .B Mod1\-Button3
 Resize focused window while dragging. Tiled windows will be toggled to the=
 floating state.
+.SH FILES
+The files containing programs to be started along with dwm are searched fo=
r in
+the following directories:
+.IP "1. $XDG_DATA_HOME/dwm"
+.IP "2. $HOME/.local/share/dwm"
+.IP "3. $HOME/.dwm"
+.P
+The first existing directory is scanned for any of the autostart files bel=
ow.
+.TP 15
+autostart.sh
+This file is started as a shell background process before dwm enters its h=
andler
+loop.
+.TP 15
+autostart_blocking.sh
+This file is started before any autostart.sh; dwm waits for its terminatio=
n.
 .SH CUSTOMIZATION
 dwm is customized by creating a custom config.h and (re)compiling the sour=
ce
 code. This keeps it fast, secure and simple.
diff --git a/dwm.c b/dwm.c
index 4465af1..2156b49 100644
--- a/dwm.c
+++ b/dwm.c
@@ -29,6 +29,7 @@
 #include &lt;string.h&gt;
 #include &lt;unistd.h&gt;
 #include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
 #include &lt;sys/wait.h&gt;
 #include &lt;X11/cursorfont.h&gt;
 #include &lt;X11/keysym.h&gt;
@@ -193,6 +194,7 @@ static void resizeclient(Client *c, int x, int y, int w=
, int h);
 static void resizemouse(const Arg *arg);
 static void restack(Monitor *m);
 static void run(void);
+static void runautostart(void);
 static void scan(void);
 static int sendevent(Client *c, Atom proto);
 static void sendmon(Client *c, Monitor *m);
@@ -235,7 +237,11 @@ static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
=20
 /* variables */
+static const char autostartblocksh[] =3D "autostart_blocking.sh";
+static const char autostartsh[] =3D "autostart.sh";
 static const char broken[] =3D "broken";
+static const char dwmdir[] =3D "dwm";
+static const char localshare[] =3D ".local/share";
 static char stext[256];
 static int screen;
 static int sw, sh;           /* X display screen geometry width, height */
@@ -1380,6 +1386,83 @@ run(void)
 			handler[ev.type](&amp;ev); /* call handler */
 }
=20
+void
+runautostart(void)
+{
+	char *pathpfx;
+	char *path;
+	char *xdgdatahome;
+	char *home;
+	struct stat sb;
+
+	if ((home =3D getenv("HOME")) =3D=3D NULL)
+		/* this is almost impossible */
+		return;
+
+	/* if $XDG_DATA_HOME is set and not empty, use $XDG_DATA_HOME/dwm,
+	 * otherwise use ~/.local/share/dwm as autostart script directory
+	 */
+	xdgdatahome =3D getenv("XDG_DATA_HOME");
+	if (xdgdatahome !=3D NULL &amp;&amp; *xdgdatahome !=3D '\0') {
+		/* space for path segments, separators and nul */
+		pathpfx =3D ecalloc(1, strlen(xdgdatahome) + strlen(dwmdir) + 2);
+
+		if (sprintf(pathpfx, "%s/%s", xdgdatahome, dwmdir) &lt;=3D 0) {
+			free(pathpfx);
+			return;
+		}
+	} else {
+		/* space for path segments, separators and nul */
+		pathpfx =3D ecalloc(1, strlen(home) + strlen(localshare)
+		                     + strlen(dwmdir) + 3);
+
+		if (sprintf(pathpfx, "%s/%s/%s", home, localshare, dwmdir) &lt; 0) {
+			free(pathpfx);
+			return;
+		}
+	}
+
+	/* check if the autostart script directory exists */
+	if (! (stat(pathpfx, &amp;sb) =3D=3D 0 &amp;&amp; S_ISDIR(sb.st_mode))) {
+		/* the XDG conformant path does not exist or is no directory
+		 * so we try ~/.dwm instead
+		 */
+		char *pathpfx_new =3D realloc(pathpfx, strlen(home) + strlen(dwmdir) + 3=
);
+		if(pathpfx_new =3D=3D NULL) {
+			free(pathpfx);
+			return;
+		}
+		pathpfx =3D pathpfx_new;
+
+		if (sprintf(pathpfx, "%s/.%s", home, dwmdir) &lt;=3D 0) {
+			free(pathpfx);
+			return;
+		}
+	}
+
+	/* try the blocking script first */
+	path =3D ecalloc(1, strlen(pathpfx) + strlen(autostartblocksh) + 2);
+	if (sprintf(path, "%s/%s", pathpfx, autostartblocksh) &lt;=3D 0) {
+		free(path);
+		free(pathpfx);
+	}
+
+	if (access(path, X_OK) =3D=3D 0)
+		system(path);
+
+	/* now the non-blocking script */
+	if (sprintf(path, "%s/%s", pathpfx, autostartsh) &lt;=3D 0) {
+		free(path);
+		free(pathpfx);
+	}
+
+	if (access(path, X_OK) =3D=3D 0)
+		system(strcat(path, " &amp;"));
+
+	free(pathpfx);
+	free(path);
+}
+
 void
 scan(void)
 {
@@ -2142,6 +2223,7 @@ main(int argc, char *argv[])
 		die("pledge");
 #endif /* __OpenBSD__ */
 	scan();
+	runautostart();
 	run();
 	cleanup();
 	XCloseDisplay(dpy);
--=20
2.27.0

</pre></body></html>
------MultipartBoundary--K8ww1cGZ6JYBpSUltqPWWfGnkLc6oh6VSy06oAjxb0----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-044fea00-5219-462a-a0ff-c8f2b934f1fc@mhtml.blink

@charset "utf-8";
=0A
------MultipartBoundary--K8ww1cGZ6JYBpSUltqPWWfGnkLc6oh6VSy06oAjxb0------
